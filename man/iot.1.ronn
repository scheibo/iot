iot(1) -- input/output tests
============================

## SYNOPSIS

`iot` <program> <test>...<br>
`iot` <program> <suite>...<br>

## DESCRIPTION

`iot` serves as a testing 'suite' for the times when you only care that given a certain input, a certain output is produced. `iot` tries to be a simple solution to creating and managing
 test suites in this limited environment.

The basic idea behind `iot` is that it runs a given program and saves the output (and error) streams, comparing them to the expected output (and error). `iot` can handle running entire suites of such tests (i.e. directories on input files), or simply individual tests. One powerful feature that `iot` has is the ability to accept custom matchers for dealing with the output of tests. See the [CUSTOM MATCHERS][] section below for more information.

* view the [README][].
* view the annotated [source](http://scheibo.github.com/iot).

## USAGE

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

## OPTIONS

The following elements specify directory or file preferences. These values can also be
set by via the [ENVIRONMENT][].

* `-s` <directory>, `--sandboxdir` <directory>, `--sandboxdir`=<directory>, `--tempdir` <directory>, `--tempdir`=<directory>:
  The directory to store all of `iot`'s temporary files.

* `-t` <directory>, `--testdir` <directory>, `--testdir`=<directory>:
  The name of the directory that stores the tests. Defaults to '<ROOTDIR>/tests'

* `-r`, `--rootdir`,`--rootdir`=<directory>:
  The directory which contains the program to be tested.

* `-c` <file>, `--command` <file>, `--command`=<file>:
  Use the given command to execute the <program> which is being tested
  as opposed to running it with `./program`

* `-m`, `--matcher` <file>:
  Path to a custom [matcher][CUSTOM MATCHERS] file.

Various different mode options can also be specified:

* `-i`, `--immeadiate`:
  Immediately print diagnostic information regarding each failed test
  as opposed to waiting until all the tests have been run.

* `-x`, `--sudden-death`:
	Stop testing after the first failed test. Immediately exit and print
	information regarding the failed test case.

* `-q`, `--quiet`:
  Don't print any output, just return an exit code signaling pass or fail.

## ENVIRONMENT_VARIABLES

* `SANDBOXDIR`:
  The directory to store all of `iot`'s temporary files.
  The `--sandboxdir` option takes precedence over this value.

* `TESTDIR`:
  The name of the directory that stores the tests. Defaults
  to '<ROOTDIR>/tests'. The `--testdir` option takes precedence
	over this value.

* `ROOTDIR`:
  The directory which contains the program to be tested.
	The `--rootdir` option takes precedence over this value.

* `COMMAND`:
	Use the given command to execute the <program> which is being tested
	as opposed to running it with `./program`. The `--command` option takes
	precedence over this value.

* `MATCHER_FILE`:
  Path to a custom [matcher][CUSTOM MATCHERS] file. The `--matcher` option takes precedence
  over this value.

## CUSTOM MATCHERS

`iot` provides the ability to using a custom matcher when determining if a test passes or fails as opposed to simply using diff. To create a custom matcher, create a file in the <TESTDIR> which is called either 'test_matcher' or 'iot\_matcher'. Alternatively, specify a matcher file with the `--matcher` argument or the <MATCHER> environment variable. Inside the matcher file write one or more functions named '`prefix_`matcher', where `prefix` is the name of the given matcher you are hoping to create. Any tests in the input directory with this prefix at the beginning of their file name (seperated with a '\_' or a '.' from the rest of the file name) will use this custom matcher as opposed to `diff`. A custom matcher is passed 4 arguments: `result_output`, `result_err`, `expected_output`, `expected_err`; where all of the previous arguments are paths which name the specific (possibly non-existent) files. An example of a matcher which checks the result error output for the message 'ERROR' would be:

	# tests/test_matcher
	error_check_matcher() {
		shift; # ignore result_output
		grep "ERROR" "$1"
	}

See the [README][] for far more in depth coverage of custom matchers.

## RETURN VALUES

`iot` returns the number of tests which failed as its exit code.

## SECURITY CONSIDERATIONS

Since `eval` is used, potentially arbitrary bits of code can be executed. The best way to avoid this potential security hole is to be somewhat intelligent when using `iot`. Running it as root or with things like 'rm -rf' as a command argument are bound for trouble, and to be fair, you probably deserve to get shot in the foot if you plan on using it like that.

## BUGS

Please open up an [issue][] on Github if you find a bug. Patches and pull requests are always welcome.

[issue]: https://github.com/scheibo/iot/issues

## COPYRIGHT

`iot` is Copyright (C) 2011 Kirk Scheibelhut [http://scheibo.com/about](http://scheibo.com/about)

[README]: (https://github.com/scheibo/iot#readme)
